#include <iostream>
using namespace std;

// 普通函数与函数模板调用规则
// 1. 如果函数模板和普通函数都可以实现，优先调用普通函数
// 2. 可以通过空模板参数列表来强制调用函数模板
// 3. 函数模板也可以发生重载
// 4. 如果函数模板可以产生更好的匹配，优先调用函数模板
// 5. 可以通过函数模板产生函数
// 6. 如果函数模板产生更好的匹配，优先调用函数模板
// 7. 如果函数模板产生更好的匹配，但是需要进行类型转换，那么优先调用普通函数
// 8. 如果函数模板产生更好的匹配，但是需要进行类型转换，而函数模板也可以产生更好的匹配，那么优先调用函数模板
// 9. 如果函数模板产生更好的匹配，但是需要进行类型转换，而函数模板也可以产生更好的匹配，但是函数模板不是通过隐式类型转换产生的，那么优先调用普通函数

void myPrint(int a, int b){
    cout << "调用的普通函数" << endl;
}

template <class T>
void myPrint(T a, T b){
    cout << "调用的函数模板" << endl;
}

void test01(){
    int a = 10, b = 20;
    myPrint(a, b); // 调用普通函数
    myPrint<>(a, b); // 强制调用函数模板
    
}

int main(){
    test01();
    return 0;
}